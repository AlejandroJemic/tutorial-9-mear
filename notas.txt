MERN Stack Curso - Mongodb, Express, React y Nodejs, Parte 1 - Backend con Nodejs, Express y Mongodb
https://www.youtube.com/watch?v=DqpL5UtJHus&list=WL&index=29&t=0s

MERN Stack Curso - Mongodb, Express, React y Nodejs, Parte 2 - Frontend con React
https://www.youtube.com/watch?v=204v5QXHlmc&index=2&list=WL

5,156 vistas
Fazt
Publicado el 11 jun. 2018
El Stack MERN, tiene como objetivo crear aplicaciones web modernas con Javascript como principal lenguaje
 tanto el Frontend como en el Backend y la Base de datos.
En este curso crearemos un aplicación CRUD que es una Single Page Application
 o Aplicacion de una sola página utilizando Reactjs. y esta estará alojada
en un servidor Nodejs que usara Express como framework del lado servidor y Mongodb como Base de datos.

CURSO DE REACT: https://www.youtube.com/playlist?list=PLL0TiOXBeDai6x37_wQwWX6_qNZUM4FBm
CURSO DE MONGODB: https://www.youtube.com/playlist?list=PLL0TiOXBeDaj94IqckOt8M18pLlfdP9U0
CURSO DE EXPRESS: https://www.youtube.com/watch?v=8eg4w8v076w
CÓDIGO FINAL DEL PROYECTO: https://github.com/FaztWeb/mern-stack-tasks

PARTE 1: BACKEND NODE EXPRES MONGO MONGOOSE
-------------------------------------------
creo el server.js   para servir las aplicaciones node express
creo el routes/tasks.routes.js para maejar el enrutamiento
creo el models/task.js para el modelo de datos
creo el database.js par aconeccion con la bbdd
creo public par alos archivos publicos estaticos, y los bundels compilados
creo App para la aplicacion de react

npm init -y
npm install --save express
npm i -D nodemon
"start": "node server.js"
"dev": "nodemon ./src/erver.js"

npm install --save 
    morgan  sirve para ver las peticiones al servdor por consola

edito el router/task.router.js
creo el public/index.html
npm i -S mongoose   para conectar al bbss y definir como seran estos
creo la conec a bb database.js
crear los modelo en el archivo task.js
agrego las rutas para leer y guardar modificar eliminar y consultar tareas en el task.routes.js
se recomienda instalar la extencion POSTMAN de chrome para hacer pruebas a la api

PARTE 2 FRONENDT REACT
----------------------

vamos a coufigurar la app react desde creo
npm i -D webpack webpack-cli react react-dom
creo el webpack.config.js   y genero la configuracion
creo el app/index.js    y cominezo a ingresar los componentes de react

npm i -D babel  babel-loader@7 babel-core babel-preset-env babel-preset-react

OJO 
ESTE TUTORIAL ANDA SOLO CON LAS SIGUIENTES VERCIONES
  "devDependencies": {
    "babel-core": "6.26.3",
    "babel-loader": "7.1.4",
    "babel-preset-env": "1.7.0",
    "babel-preset-react": "6.24.1",
    "nodemon": "1.17.5",
    "react": "16.4.0",
    "react-dom": "16.4.0",
    "webpack": "4.11.1",
    "webpack-cli": "3.0.3"

(ojo bable-loader ^8 requiere @babel/core @babel/preset-env @babel/preset-react
 !!!!no babel-core, NI babel-preset-env babel-preset-react, A MENOS QUE USE BABEL 7)
creo el .babelrc con los presets env, react
agrego lo sloadres al webpack.config.js en module rules

"webpack": "webpack --mode development --watch" (el --watch permite hot rebuild)

agrego los componetes para el css
agrego el CDN de matetializacss.com  en index.html
<!-- Compiled and minified CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0-rc.2/css/materialize.min.css">
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<!-- Compiled and minified JavaScript -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0-rc.2/js/materialize.min.js"></script>

construyo el contenido de la pagina y los formularios en el app.js
creo los metodos para agregar tareas desde el form a la api
creo los metodos para consultar las tareas y mostrarlas en la lista, tambibien para al actualizacion de la lista de tareas luego de guardar
agrego los metodos para editar y borar tareas

TODO:
    separar en componetes parciales uno para la el form, otro para al lista
    separar cada componente en un container y un view
    agergar redux, definir acciones y reducers
    pasar los datos al store de redus

    agregar un login
    agregar seguridad por toquen a la api
    agregar fechas a las tareas
    agergar estados a las tareas realiada, anulada